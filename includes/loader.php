<?php/** * Alfred Loader. * * This class creates the core functionality for the theme. * Adds custom post types, taxonomies, etc. * * @since Alfred 0.1 */if ( ! class_exists( 'alfred' ) ) :/** * Oh Alfred, you're so helpful. * * @since Alfred 0.1 */class alfred {		function __construct() {		$this->_setup_globals();		$this->_setup_files();		$this->_setup_actions();	}		function _setup_globals() {			}		function _setup_files() {		// Load the files		foreach ( array( 'classes', 'p2p', 'options' ) as $file )			require_once( STYLESHEETPATH . '/includes/' . $file . '.php' );		// Load the function and template files		foreach ( array( 'general', 'client', 'project', 'task' ) as $file ) {			require_once( STYLESHEETPATH . '/includes/' . $file . '-functions.php' );			require_once( STYLESHEETPATH . '/includes/' . $file . '-template.php'  );		}		// Quick admin check and load if needed		if ( is_admin() )			require_once( STYLESHEETPATH . '/admin/admin.php' );	}		function _setup_actions() {		// Textdomain		add_action( 'init', array( $this, 'textdomain' ) );				// Custom Post Types		add_action( 'init', array( $this, 'post_types' ) );				// Custom Taxonomies		add_action( 'init', array( $this, 'tax' ) );				// Rewrite Tags		add_action( 'init', array( $this, 'rewrite_tags' ) );				// Rewrite Rules		add_action( 'init', array( $this, 'rewrite_rules' ) );				// Start Alfred		do_action( 'alfred_init' );	}		/**	 * Load the translation file for current language.	 *	 * @since Alfred 0.1	 *	 * @uses apply_filters() Calls 'alfred_locale' with the	 *                        {@link get_locale()} value	 * @uses load_textdomain() To load the textdomain	 * @return bool True on success, false on failure	 */	function textdomain() {		$locale = apply_filters( 'alfred_locale', get_locale() );		$mofile = sprintf( 'alfred-%s.mo', $locale );		$mofile_global = WP_LANG_DIR . '/' . $mofile;		if ( file_exists( $mofile_global ) )			return load_textdomain( 'alfred', $mofile_global );		return false;	}		function post_types() {		do_action( 'alfred_register_post_types' );	}		function tax() {		do_action( 'alfred_register_taxonomies' );	}		function rewrite_tags() {		do_action( 'alfred_add_rewrite_tags' );	}		function rewrite_rules() {		do_action( 'alfred_generate_rewrite_rules' );	}}endif;